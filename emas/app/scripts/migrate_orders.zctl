""" 
"""
import sys
import datetime
import transaction
from Testing import makerequest
from AccessControl.SecurityManagement import getSecurityManager
from AccessControl.SecurityManagement import setSecurityManager
from AccessControl.SecurityManagement import newSecurityManager
from zope.component import queryUtility
from plone.registry.interfaces import IRegistry
from Products.CMFCore.utils import getToolByName

from zope.app.component.hooks import setSite

from emas.theme.interfaces import IEmasSettings

try:
    portal_id = sys.argv[1]
except IndexError:
    portal_id = 'Plone' 

if not app.hasObject(portal_id):
    print "Please specify the id of your plone site as the first argument "
    print "to this script."
    print "Usage: <instancehome>/bin/instance run %s <id>" % sys.argv[0]
    sys.exit(1)

portal = app[portal_id]
setSite(portal)

# we assume there is an admin user
app = makerequest.makerequest(app)
user = app.acl_users.getUser('admin')
newSecurityManager(None, user.__of__(app.acl_users))

members = portal.portal_membership.listMembers()
created = skipped = 0
print 'Preparing to update %s folders for members.' %len(members)

today = datetime.datetime.now()
orders = portal._getOb('orders')
products_and_services = portal._getOb('products_and_services')
registry = queryUtility(IRegistry)
settings = registry.forInterface(IEmasSettings)

services_map = {'answerdatabase_expirydate':
                    ['maths-grade10-questions',
                     'maths-grade11-questions',
                     'maths-grade12-questions',
                     'science-grade10-questions',
                     'science-grade11-questions',
                     'science-grade12-questions',
                    ],
                'moreexercise_expirydate':
                    ['maths-grade10-practice',
                     'maths-grade11-practice',
                     'maths-grade12-practice',
                     'science-grade10-practice',
                     'science-grade11-practice',
                     'science-grade12-practice',
                    ]
               }

new_orders = []
osm = getSecurityManager()
for member in members:
    try:
    newSecurityManager(None, member)
    print "Migrating orders for:%s." % member.getId()
    for old_service_id, new_service_ids in services_map.items():
        if getattr(member, old_service_id).asdatetime() < today:
            # create an order
            ordernumber = settings.order_sequence_number + 1
            settings.order_sequence_number = ordernumber
            ordernumber = '%04d' % ordernumber
            orders.invokeFactory(
                type_name='emas.app.order',
                id=ordernumber,
                title=ordernumber,
                userid=member.getId()
            )
            order = orders._getOb(ordernumber)
            new_orders.append(order)
            # add orderitems for each service
            for sid in new_service_ids:
                service = products_and_services[sid]
                relation = create_relation(service.getPhysicalPath())
                item_id = order.generateUniqueId(type_name='orderitem')
                order.invokeFactory(
                    type_name='emas.app.orderitem',
                    id=item_id,
                    title=item_id,
                    related_item=relation,
                    quantity=1,
                )

    # go back to being manager
    setSecurityManager(osm)
    for order in new_orders:
        # transition it to paid
        wf = getToolByName(portal, 'portal_workflow')
        wf.doActionFor(order, 'pay')
        order.reindexObject()

transaction.commit()
