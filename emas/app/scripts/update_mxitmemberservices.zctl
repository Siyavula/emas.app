""" 
"""
import sys
import datetime
import transaction
from Testing import makerequest
from Products.CMFCore.utils import getToolByName
from AccessControl.SecurityManagement import getSecurityManager
from AccessControl.SecurityManagement import newSecurityManager
from z3c.relationfield.relation import create_relation
from plone.dexterity.utils import createContentInContainer
from plone.uuid.interfaces import IUUID

from zope.app.component.hooks import setSite

def _getServices(portal, subject):
    products_and_services = portal._getOb('products_and_services')
    services = products_and_services.objectValues()
    return [s for s in services if s.subject == subject and 'Papers' in s.Title()]

try:
    portal_id = sys.argv[1]
except IndexError:
    portal_id = 'Plone' 

if not app.hasObject(portal_id):
    print "Please specify the id of your plone site as the first argument "
    print "to this script."
    print "Usage: <instancehome>/bin/instance run %s <id>" % sys.argv[0]
    sys.exit(1)

portal = app[portal_id]
setSite(portal)

# we assume there is an admin user
app = makerequest.makerequest(app)
user = app.acl_users.getUser('admin')
newSecurityManager(None, user.__of__(app.acl_users))

memberservices = portal._getOb('memberservices')

pmt = getToolByName(portal, 'portal_membership')
pc = getToolByName(portal, 'portal_catalog')
pg = getToolByName(portal, 'portal_groups')

now = datetime.datetime.now().date()
memberservices = portal['memberservices']
ms_path = '/'.join(memberservices.getPhysicalPath())

pc = getToolByName(portal, 'portal_catalog')
query = {'portal_type': 'emas.app.memberservice',
         'path'       : ms_path}

subject_group_map = {'maths': 'PastMathsExamPapers',
                     'science': 'PastScienceExamPapers'}

for subject, groupid in subject_group_map.items():
    services = _getServices(portal, subject)

    # get all users from group
    memberids = pg.getGroupMembers(groupid)
    for memberid in memberids:
        query['userid'] = memberid
        for service in services:
            uuid = IUUID(service)
            query['serviceuid'] = uuid
            brains = pc(query)
            tmpservices = [b.getObject() for b in brains]

            if len(brains) == 0:
                mstitle = '%s for %s' % (service.title, memberid)
                related_service = create_relation(service.getPhysicalPath())
                props = {'title': mstitle,
                         'userid': memberid,
                         'related_service': related_service,
                         'service_type': service.service_type
                         }

                ms = createContentInContainer(
                    memberservices,
                    'emas.app.memberservice',
                    False,
                    **props
                )

                ms.manage_setLocalRoles(memberid, ('Owner',))
                tmpservices.append(ms)

            for ms in tmpservices:
                if service.service_type == 'credit':
                    credits = ms.credits
                    credits += service.amount_of_credits
                    ms.credits = credits
                elif service.service_type == 'subscription':
                    if now > ms.expiry_date:
                        ms.expiry_date = now
                    expiry_date = ms.expiry_date + datetime.timedelta(
                        service.subscription_period
                    )
                    ms.expiry_date = expiry_date
                ms.reindexObject()

transaction.commit()
